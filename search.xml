<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ubuntu系统中利用 github page+hexo搭建blog</title>
    <url>/2019/08/14/build-blog/</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>1、为什么搭blog？<br>想有一个自由却又严谨的空间，认真的做笔记、记录成长、好好学习的空间。混乱的脑子与头绪需要理清，生活也需要有一个认真记录的地方。希望从今开始认真的生活，努力的朝着自己的梦想前行。</p>
<p>2、此文为本胖记录自己搭建blog所踩过的坑，所以本文是按照本胖踩坑顺序所写。另外本胖电脑安装了ubuntu子系统，所以下文所安装的软件全是linux系统中安装的，超简单的命令行安装可以说是超级友好了。</p>
<h1 id="二、git相关"><a href="#二、git相关" class="headerlink" title="二、git相关"></a>二、git相关</h1><p>git入门相关资料：<a href="https://link.juejin.im/?target=https://gitee.com/progit/">Pro Git（中文版）</a>、<a href="https://www.runoob.com/git/git-tutorial.html">Git菜鸟教程</a>、<a href="https://www.runoob.com/w3cnote/git-guide.html">Github 简明教程</a></p>
<h2 id="2-1-注册github账号"><a href="#2-1-注册github账号" class="headerlink" title="2.1 注册github账号"></a>2.1 注册github账号</h2><p>在<a href="https://github.com/">github官网</a>上注册账号</p>
<h2 id="2-2-客户端安装git"><a href="#2-2-客户端安装git" class="headerlink" title="2.2 客户端安装git"></a>2.2 客户端安装git</h2><p>ubuntu客户端下载安装git，并与github连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装git</span></span><br><span class="line">sudo apt install git</span><br><span class="line"><span class="comment">#将git与github账号绑定</span></span><br><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br><span class="line"><span class="comment">#生成ssh公私钥文件以便连接github</span></span><br><span class="line"><span class="comment">#确保回到家目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br><span class="line"><span class="comment">#创建私钥过程中直接回车，按照默认配置生成ssh公私钥文件</span></span><br><span class="line"><span class="comment">#在~/.ssh/文件夹中找到刚刚所创建的ssh公私钥，pub后缀的为公钥，下一步中需要将其中内容复制到github中</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-将ssh公钥放入github"><a href="#2-3-将ssh公钥放入github" class="headerlink" title="2.3 将ssh公钥放入github"></a>2.3 将ssh公钥放入github</h2><p>打开github的<a href="https://github.com/settings/keys">setting key页面</a>，将刚刚创建的公钥中的文本内容复制进key的文本框中，如下图所示</p>
<p><img src="1.png" alt="1"></p>
<p>输入<code>ssh -T git@github.com</code>测试是否配置成功，若出现如下字样则说明配置成功</p>
<p><img src="2.png" alt="2"></p>
<h2 id="2-4-创建个人仓库"><a href="#2-4-创建个人仓库" class="headerlink" title="2.4 创建个人仓库"></a>2.4 创建个人仓库</h2><p>在github新建个人仓库，命名规则为<code>用户名.github.io</code>，例如本胖叫peana，则项目名为<code>peana.github.io</code>。这也是日后本胖博客的URL，创建方式如下图所示</p>
<p><img src="3.png" alt="3"><br><img src="4.png" alt="4"></p>
<h1 id="三、安装node-js及hexo"><a href="#三、安装node-js及hexo" class="headerlink" title="三、安装node.js及hexo"></a>三、安装node.js及hexo</h1><h2 id="3-1-安装node-js"><a href="#3-1-安装node-js" class="headerlink" title="3.1 安装node.js"></a>3.1 安装node.js</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装nodejs 9.x版本</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"><span class="comment">#检查node版本</span></span><br><span class="line">node -v</span><br><span class="line"><span class="comment">#将node和npm设置为全局</span></span><br><span class="line">sudo ln /home/ubuntu/node-v8.11.1-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">sudo ln /home/ubuntu/node-v8.11.1-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br><span class="line"><span class="comment">#安装n模块，将node升至最新稳定版</span></span><br><span class="line">npm install-g n</span><br><span class="line">n stable</span><br><span class="line">node -v <span class="comment">#检查当前node版本</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-安装hexo"><a href="#3-2-安装hexo" class="headerlink" title="3.2  安装hexo"></a>3.2  安装hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org          //由于国外npm源网速过慢，建议更换为国内源</span><br><span class="line">npm config list               //查看换源是否成功</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="3-3-初始化博客"><a href="#3-3-初始化博客" class="headerlink" title="3.3 初始化博客"></a>3.3 初始化博客</h2><p>安装hexo完成后即可初始化本胖的博客了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在家目录下新建一个blog文件夹以完成hexo的初始化，文件夹无需自己创建，以下命令会自动创建</span></span><br><span class="line">hexo init ~/blog </span><br></pre></td></tr></table></figure>
<p>检测博客是否搭建成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate         //生成静态文件,该命令可以简写为hexo g                </span><br><span class="line">hexo server           //启动服务器。默认情况下，访问网址为：http://localhost:4000/，该命令可以简写为hexo s 。</span><br><span class="line">hexo deploy           //部署网站</span><br><span class="line">hexo clean            //清除本地生成的静态文件</span><br></pre></td></tr></table></figure>

<p>访问<code>localhost:4000</code>检查hexo是否启动<br><img src="5.png" alt="5"></p>
<p>最后就可使用<code>hexo d</code>命令，将生成的静态文件部署到github上了</p>
<h1 id="四、美化属于自己的blog"><a href="#四、美化属于自己的blog" class="headerlink" title="四、美化属于自己的blog"></a>四、美化属于自己的blog</h1><h2 id="4-1-选择主题"><a href="#4-1-选择主题" class="headerlink" title="4.1 选择主题"></a>4.1 选择主题</h2><p>选择喜欢的hexo主题，并修改相应配置<br>在hexo的官网主题平台寻找自己喜欢的hexo主题<code>https://hexo.io/themes/</code>，在本胖的两天的寻找下，终于找到了一个超级心满意足的主题Annie。感谢主题制作者Sariay 。齐全易懂的主题使用说明也相当友好了。</p>
<h2 id="4-2-修改配置"><a href="#4-2-修改配置" class="headerlink" title="4.2 修改配置"></a>4.2 修改配置</h2><p>按照Annie主题作者所提供的readme修改配置<br><code>https://sariay.github.io/2018/08/27/Annie%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</code></p>
<h2 id="4-3-利用github搭建云图库"><a href="#4-3-利用github搭建云图库" class="headerlink" title="4.3 利用github搭建云图库"></a>4.3 利用github搭建云图库</h2><p>搭建annie主题所需要的云图库，采用github仓库创建仓库的方式为博客提供图片。</p>
<p>A 创建一个新的代码仓库，命名为<code>Random-img</code></p>
<p><img src="6.png" alt="6"></p>
<p>B 在本地创建git本地仓库，连接到github远端仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在家目录创建本地git仓库</span></span><br><span class="line">mkidr ~/git </span><br><span class="line"><span class="built_in">cd</span> ~/git</span><br><span class="line">git init</span><br><span class="line"><span class="comment">#添加远程库</span></span><br><span class="line">git remote add [shortname] [url]</span><br><span class="line"><span class="comment">#例 git remote add origin git@github.com:peana/-Random-img.git</span></span><br><span class="line">git remote <span class="comment">#查看当前连接的远程仓库</span></span><br><span class="line"><span class="comment">#git上传文件到github 需要三步骤，添加文件到暂存区，提交操作到本地的版本库，推送操作</span></span><br><span class="line">git add [textName]</span><br><span class="line">git commit -m <span class="string">&#x27;&#x27;</span> <span class="comment">#引号中写提交操作备注</span></span><br><span class="line">git push -u origin master <span class="comment">#origin为远程仓库别名，master为本地的项目分支</span></span><br></pre></td></tr></table></figure>
<p>C 打开github代码仓库的page功能<br>打开<code>Random-img</code>代码仓库，settings–options–GitHub Pages （githua pages 设置在靠下位置，需要向下滑动才能查看<br><img src="7.png" alt="7"></p>
<p>此URL即随机图片所需引用的地址，按4.2 配置说明修改相关配置文件<br><img src="7.png" alt="7"></p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>第二周：认识 sql 并学习数据库的基础操作</title>
    <url>/2019/08/24/second-week-work/</url>
    <content><![CDATA[<h1 id="认识-sql-并学习数据库的基础操作"><a href="#认识-sql-并学习数据库的基础操作" class="headerlink" title="认识 sql 并学习数据库的基础操作"></a>认识 sql 并学习数据库的基础操作</h1><p>Date：第二周<br>Auther：胖花<br>Blog：<a href="https://peana.github.io/2019/08/24/second-week-work/">https://peana.github.io/2019/08/24/second-week-work/</a></p>
<h1 id="一、什么是关系型和非关系型数据库"><a href="#一、什么是关系型和非关系型数据库" class="headerlink" title="一、什么是关系型和非关系型数据库"></a>一、什么是关系型和非关系型数据库</h1><h2 id="1-1-关系型数据库："><a href="#1-1-关系型数据库：" class="headerlink" title="1.1 关系型数据库："></a>1.1 <a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93">关系型数据库</a>：</h2><p>（资料来源：维基百科）</p>
<ul>
<li><strong>概念</strong>：依靠关系模型来创建的数据库，关系模型可简单理解成“一对一”，“一对多”，“多对多”的关系。</li>
</ul>
<p><strong>关系模型</strong>由关系数据结构（二维表格模型）、关系操作集合（sql语句）、关系完整性约束（数据类型约束等）三部分组成</p>
<hr>
<ul>
<li><strong>关系型数据库特点</strong><ul>
<li>优点<br>1、容易理解：二维表结构复合数学逻辑，关系 模型相对网状、层次等，较其他模型容易理解<br>2、数据安全：由于数据存储在磁盘而不是内存中，数据不受断电影响<br>3、易于维护：由于关系模型中关系完整性约束，大大降低了数据冗余和数据不一致的概率</li>
<li>缺点<br>1、性能欠佳：多表的关联查询过于复杂，复杂的数据分析类型的复杂SQL报表查询，<br>2、维护复杂：数据库难以进行横向扩展，无法像其他应用服务以用通过简单的硬件堆叠和服务节点增加以达到扩展性能和负载的目的。若应用系统的用户量和访问量逐渐增加后，数据库往往需要通过停机维护、数据迁移的方式完成升级、扩展。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>常见关系型数据库</strong><br>Oracle，Microsoft SQL Server，MySQL，PostgreSQL，DB2，<br>Microsoft Access， SQLite，Teradata，MariaDB(MySQL的一个分支)，SAP</li>
</ul>
<h2 id="1-2-非关系型数据库"><a href="#1-2-非关系型数据库" class="headerlink" title="1.2 非关系型数据库"></a>1.2 <a href="https://zh.wikipedia.org/wiki/NoSQL">非关系型数据库</a></h2><ul>
<li><strong>概念</strong>：又称NoSQL，是除了关系型数据库的其他类型数据库。主要是基于非关系模型的数据库</li>
<li>非关系型模型<ul>
<li>列模型：存储的数据是一列列的。关系型数据库以一行作为一个记录，列模型数据库以一列为一个记录。（这种模型，数据即索引，IO很快，主要是一些分布式数据库）</li>
<li>键值对模型：可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li>
<li>文档类模型：以一个个文档来存储数据，有点类似“键值对”</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>非关系型数据库特点</strong><ul>
<li>优点：<br>1、读取快，效率高：因为数据存放在内存中<br>2、灵活，可适用于SNC（Social Networking Services）中：例如facebook、微博等。系统升级、功能增加往往意味着数据结构的巨大变动，关系型数据库在此时需要新的结构化数据存储，而非关系型数据库算是数据结构化存储方式的集合，恰能完美解决<br>3、定制化程度高：用户可根据需求添加字段，获取信息时，只需要根据id取出相应的value值即可</li>
<li>缺点：<br>1、不安全：因为数据存放在内存中，断电会丢失数据<br>2、只适合简单数据<br>3、不适合持久存储海量数据</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>常见非关系型数据库</strong></p>
<ul>
<li>分布式数据库（很强的可拓展性，基于列模型）：HBase</li>
<li>键值对数据库（具有极高的并发读写性能）：Redis， Amazon DynamoDB， Memcached</li>
<li>文档数据库（海量数据中快速查询）：MongoDB</li>
</ul>
</li>
<li><p><strong>学习参考</strong><br><a href="https://www.jianshu.com/p/fd7b422d5f93">https://www.jianshu.com/p/fd7b422d5f93</a><br><a href="https://www.cnblogs.com/progor/p/8729798.html">https://www.cnblogs.com/progor/p/8729798.html</a><br><a href="https://blog.csdn.net/u014590757/article/details/79900497">https://blog.csdn.net/u014590757/article/details/79900497</a></p>
</li>
</ul>
<h1 id="二、mysql的基础知识"><a href="#二、mysql的基础知识" class="headerlink" title="二、mysql的基础知识"></a>二、mysql的基础知识</h1><h2 id="2-1-MySQL基础设置"><a href="#2-1-MySQL基础设置" class="headerlink" title="2.1 MySQL基础设置"></a>2.1 MySQL基础设置</h2><ul>
<li>基础操作<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#按照提示输入mysql密码</span></span><br><span class="line"><span class="comment">#以下命令在mysql交互中进行</span></span><br><span class="line">show databases;<span class="comment">#查看所有数据库</span></span><br><span class="line">use mysql;<span class="comment">#使用mysql</span></span><br><span class="line">show tables;<span class="comment">#查看所选数据库下的数据表</span></span><br></pre></td></tr></table></figure></li>
<li>创建数据库，数据表<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建study数据库</span></span><br><span class="line">create DATABASE study;</span><br><span class="line">use study;</span><br><span class="line"><span class="comment">#创建user表,UNSIGNED为非负数</span></span><br><span class="line">CREATE TABLE IF NOT EXISTS `user`(</span><br><span class="line">   `id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `name` VARCHAR(100) NOT NULL,</span><br><span class="line">   `sex` VARCHAR(40) NOT NULL,</span><br><span class="line">   `phone` INT UNSIGNED,</span><br><span class="line">   PRIMARY KEY ( `id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></li>
<li>创建用户并最小化赋权<ul>
<li><strong>创建用户</strong>： <ul>
<li><strong>命令</strong>：<br><code>CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;</code></li>
<li><strong>说明</strong>：<br>username：你将创建的用户名<br>host：指定用户可以在哪个主机上登陆此mysql，本地用户可使用localhost，使用通配符%表示该用户可以从<strong>任意远程主机登陆</strong><br>password：用户登陆密码</li>
</ul>
</li>
<li><strong>授权与撤销权限</strong>：<br>  — <strong>授权</strong>：<br><code>GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;;</code><br>  — <strong>撤销权限</strong>：<br><code>REVOKE privilege ON databasename.tablename FROM &#39;username&#39;@&#39;host&#39;;</code><ul>
<li><strong>说明</strong>：<br>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL<br>databasename：数据库名<br>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示，如<code>*.*</code></li>
</ul>
</li>
<li><strong>查看mysql所有用户</strong>：<br><code>select * from mysql.user\G;</code></li>
<li><strong>删除用户</strong>:<br><code>DROP USER &#39;username&#39;@&#39;host&#39;;</code></li>
</ul>
</li>
</ul>
<h2 id="2-2-MySQL数据类型"><a href="#2-2-MySQL数据类型" class="headerlink" title="2.2 MySQL数据类型"></a>2.2 MySQL数据类型</h2><p>此处只列举常用数据类型<br>|类型|大小(字节)|范围|用途|<br>|-|-|-|-|<br>|INT|4|(0，4 294 967 295)|大整数值|<br>|DATE|3|1000-01-01/9999-12-31|日期值(YYYY-MM-DD)|<br>|TIME|3|’-838:59:59’/‘838:59:59’|时间值(HH:MM:SS)|<br>|CHAR|0-255||定长字符串|<br>|VARCHAR|0-65535||变长字符串|</p>
<h1 id="三、mysql增删改查"><a href="#三、mysql增删改查" class="headerlink" title="三、mysql增删改查"></a>三、mysql增删改查</h1><ul>
<li>增<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure></li>
<li>删<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM table WHERE id&#x3D;1;</span><br></pre></td></tr></table></figure></li>
<li>改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE table_name SET field1&#x3D;new-value1, field2&#x3D;new-value2 [WHERE Clause]</span><br></pre></td></tr></table></figure></li>
<li>查<br><code>SELECT column_name,column_name FROM table_name [WHERE Clause][LIMIT N][ OFFSET M]</code><ul>
<li>方括号内为可选项</li>
<li>用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li>
<li>用 WHERE 语句来包含任何条件</li>
<li>用 LIMIT 属性来设定返回的记录数</li>
<li>通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0</li>
</ul>
</li>
</ul>
<p><strong>where子句过滤：</strong></p>
<ul>
<li>操作符：<ul>
<li> =,&lt;&gt;,!=,&lt;,&lt;=,!&lt;,&gt;,&gt;=,!&gt;,BETWEEN,IS NULL</li>
<li>不匹配检查</li>
<li>范围检查</li>
<li>空值检查</li>
</ul>
</li>
<li>高级数据过滤<ul>
<li>AND</li>
<li>OR</li>
<li>IN:字段中的值与in后面的集合匹配则选出</li>
<li>NOT</li>
</ul>
</li>
<li>使用通配符过滤：like<ul>
<li>%：任意字符出现任意次数</li>
<li>_ ：匹配单一字符</li>
<li>[   ] : 用来指定一个字符集，匹配括号内的字符 </li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>信安之路学习</category>
      </categories>
      <tags>
        <tag>SQL学习</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>第一周：学籍备案以及环境准备</title>
    <url>/2019/08/15/first-week-work/</url>
    <content><![CDATA[<h1 id="学籍备案以及环境准备"><a href="#学籍备案以及环境准备" class="headerlink" title="学籍备案以及环境准备"></a>学籍备案以及环境准备</h1><p>Date：第一周<br>Auther：胖花<br>Blog：<a href="https://peana.github.io/2019/08/15/first-week-work/">https://peana.github.io/2019/08/15/first-week-work/</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为刚毕业的一个小白，安全这个大领域我还是没真正入门。 19年的暑假，很幸运的信安之路举办了一个小白计划，趁此机会加入学习，以此博客记录我的学习成长，望一年后，自己有所成长。</p>
<h1 id="个人资料"><a href="#个人资料" class="headerlink" title="个人资料"></a><strong>个人资料</strong></h1><p>个人在知识星球中的ID：911</p>
<p><img src="1.png" alt="1"></p>
<p>常用名：胖花</p>
<p>目前职业：在职（今年刚入职）</p>
<p>所在地区：江苏南京</p>
<p>熟悉的编程语言：python</p>
<p>自我介绍：一个在安全门前徘徊了两年的小白。</p>
<h1 id="第一周环境准备报告"><a href="#第一周环境准备报告" class="headerlink" title="第一周环境准备报告"></a><strong>第一周环境准备报告</strong></h1><h2 id="一、在VMware中安装centos"><a href="#一、在VMware中安装centos" class="headerlink" title="一、在VMware中安装centos"></a>一、在VMware中安装centos</h2><p><strong>1、</strong>从阿里云镜像中（<a href="http://centos.sonn.com/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso%EF%BC%89**%E4%B8%8B%E8%BD%BDISO%E9%95%9C%E5%83%8F**%EF%BC%9A">http://centos.sonn.com/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso）**下载ISO镜像**：</a></p>
<p><img src="2.png" alt="2"></p>
<p>2、在VMware中创建新的虚拟机</p>
<p><img src="3.png" alt="3"></p>
<p><img src="4.png" alt="4"></p>
<p><img src="5.png" alt="5"></p>
<p>按照自己所下的iso镜像选择对应的系统版本：</p>
<p><img src="6.png" alt="6"></p>
<p>给虚拟机命名，并选择存放位置：</p>
<p><img src="7.png" alt="7"></p>
<p>选择磁盘大小，对于centos而言，20G足够：</p>
<p><img src="8.png" alt="8"></p>
<p><img src="9.png" alt="9"></p>
<p>重新编辑<strong>虚拟机设置</strong>，导入iso镜像：</p>
<p><img src="10.png" alt="10"></p>
<p><img src="11.png" alt="11"></p>
<p>虚拟机开机，进入centos的系统安装，选择<strong>install CentOS 7</strong>：</p>
<p><img src="12.png" alt="12"></p>
<p>选择简体中文安装：</p>
<p><img src="13.png" alt="13"></p>
<p>在此界面处，从上至下，从左至右，逐个完成各项设置：</p>
<p><img src="14.png" alt="14"></p>
<p>所有项目都设置完成后点击<strong>开始安装</strong></p>
<p><img src="15.png" alt="15"></p>
<p>设置<strong>ROOT密码</strong>和<strong>创建用户</strong>后，安装开始：</p>
<p><img src="16.png" alt="16"></p>
<p>最后，<strong>接受许可</strong>，完成网络和主机名的设置：</p>
<p><img src="17.png" alt="17"></p>
<p><img src="18.png" alt="18"></p>
<p>重启输入用户密码，进入CentOS7</p>
<p><img src="19.png" alt="19"></p>
<p><img src="20.png" alt="20"></p>
<p>关机后拍摄快照：虚拟机–快照–拍摄快照</p>
<p>以便日后操作失误后可回退</p>
<p><img src="21.png" alt="21"></p>
<h2 id="二、基础化设置"><a href="#二、基础化设置" class="headerlink" title="二、基础化设置"></a>二、基础化设置</h2><p>1、修改主机名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $HOSTNAME</span><br><span class="line">hostnamectl set-hostname test.example.com</span><br><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line">#ip与主机名绑定并设置主机名别名</span><br><span class="line">192.168.48.135 test.example.com test</span><br></pre></td></tr></table></figure>

<p>2、重命名网卡为eth0，修改内核参数，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">mv ifcfg-ens33 ifcfg-eth0</span><br><span class="line">vim ifcfg-eth0</span><br><span class="line"><span class="comment">#下列显示均为需要修改项</span></span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">NAME=eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">vim /etc/sysconfig/grub</span><br><span class="line"><span class="comment">#添加下一列</span></span><br><span class="line">增加 net.ifnames=0 biosdevname=0 在GRUB_CMDLINE_LI</span><br><span class="line"></span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line"><span class="comment">#重启生效，可见网卡名被修改且有静态ip</span></span><br></pre></td></tr></table></figure>

<p>3、设置网络yum源</p>
<p>（1）、备份原始yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">mv CentOS-Base.rpeo   CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure>

<p>（2）、设置DNS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;resolv.conf</span><br><span class="line"></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>

<p>（3）、下载yum文件，替代原yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo    http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<p>（4）、配置ELEP源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h2 id="三、安装nginx，php，mysql"><a href="#三、安装nginx，php，mysql" class="headerlink" title="三、安装nginx，php，mysql"></a>三、安装nginx，php，mysql</h2><h3 id="（一）、源码安装nginx"><a href="#（一）、源码安装nginx" class="headerlink" title="（一）、源码安装nginx"></a>（一）、源码安装nginx</h3><p>1、安装nginx依赖包<br><code>yum install -y pcre-devel zlib-devel openssl-devel wget gcc tree vim</code></p>
<p>2、从Nginx官网下载Nginx源码包<br><code>wget http://nginx.org/download/nginx-1.12.2.tar.gz</code></p>
<p>3、解压Nginx源码包到/root/nginx，编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf nginx-1.12.2.tar.gz</span><br><span class="line"><span class="comment">#在/root/nginx目录进行编译前配置</span></span><br><span class="line"><span class="built_in">cd</span> /root/nginx*</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_ssl_module</span><br><span class="line"><span class="comment">#在/root/nginx目录执行编译安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>4、启动nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">setenforce 0</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#进入到安装目录/usr/local/nginx，查看目录结构</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment">#启动Nginx</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"><span class="comment">#查看Nginx进程是否启动</span></span><br><span class="line">ps aux | grep nginx</span><br><span class="line"><span class="comment">#查看Nginx占用的端口号</span></span><br><span class="line">netstat -tlnp</span><br></pre></td></tr></table></figure>

<p>5、使用本地主机访问虚拟机上的Nginx服务器<br><img src="22.png" alt="22"></p>
<p>6、停止nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止Nginx的三种方式</span></span><br><span class="line"><span class="comment"># 1. 立即停止Nginx服务</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br><span class="line"><span class="comment"># 2.完成当前任务后停止</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s quit</span><br><span class="line"><span class="comment"># 3.杀死Nginx进程</span></span><br><span class="line">killall nginx</span><br></pre></td></tr></table></figure>

<p>7、把nginx命令添加到环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用软连接将nginx链接到/usr/local/sbin</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/sbin</span><br><span class="line">ll /usr/<span class="built_in">local</span>/sbin/ | grep <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="comment">#显示当前环境变量PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#编辑.bash_profile文件</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment">#在.bash_profile文件末尾加入以下内容</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line"><span class="comment">#引用.bash_profile文件</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment">#使用nginx命令</span></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 停止nginx</span></span><br><span class="line">nginx -s quit</span><br></pre></td></tr></table></figure>

<p>8、把<code>nginx</code>命令添加到系统服务<br>创建并编辑文件<code>/root/service-nginx.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># filename: service-nginx.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># nginx - this script starts and stops the nginx daemon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig:   - 85 15</span></span><br><span class="line"><span class="comment"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"><span class="comment">#               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"><span class="comment"># processname: nginx</span></span><br><span class="line"><span class="comment"># config:      /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment"># config:      /etc/sysconfig/nginx</span></span><br><span class="line"><span class="comment"># pidfile:     /var/run/nginx.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$NETWORKING</span>&quot;</span> = <span class="string">&quot;no&quot;</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx=&quot;/usr/sbin/nginx&quot;</span></span><br><span class="line">nginx=<span class="string">&quot;/usr/local/sbin/nginx&quot;</span></span><br><span class="line">prog=$(basename <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#NGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">NGINX_CONF_FILE=<span class="string">&quot;/usr/local/nginx/conf/nginx.conf&quot;</span></span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">make_dirs</span></span>() &#123;</span><br><span class="line">   <span class="comment"># make required directories</span></span><br><span class="line">   user=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">&quot;configure arguments:.*--user=&quot;</span> | sed <span class="string">&#x27;s/[^*]*--user=\([^ ]*\).*/\1/g&#x27;</span> -`</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$user</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> [ -z <span class="string">&quot;`grep <span class="variable">$user</span> /etc/passwd`&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">         useradd -M -s /bin/nologin <span class="variable">$user</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      options=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">&#x27;configure arguments:&#x27;</span>`</span><br><span class="line">      <span class="keyword">for</span> opt <span class="keyword">in</span> <span class="variable">$options</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> [ `<span class="built_in">echo</span> <span class="variable">$opt</span> | grep <span class="string">&#x27;.*-temp-path&#x27;</span>` ]; <span class="keyword">then</span></span><br><span class="line">              value=`<span class="built_in">echo</span> <span class="variable">$opt</span> | cut -d <span class="string">&quot;=&quot;</span> -f 2`</span><br><span class="line">              <span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$value</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                  <span class="comment"># echo &quot;creating&quot; $value</span></span><br><span class="line">                  mkdir -p <span class="variable">$value</span> &amp;&amp; chown -R <span class="variable">$user</span> <span class="variable">$value</span></span><br><span class="line">              <span class="keyword">fi</span></span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">    [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">    make_dirs</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">&quot;Starting <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">&quot;Stopping <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">    killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; rm -f <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">&quot;Reloading <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">    killproc <span class="variable">$nginx</span> -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status <span class="variable">$prog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">&quot;Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="comment"># END</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用/root/service-nginx.sh替换/etc/init.d/nginx</span></span><br><span class="line">mv /root/service-nginx.sh /etc/init.d/nginx</span><br><span class="line"><span class="comment">#赋予可执行限权</span></span><br><span class="line">chmod 755 /etc/init.d/nginx</span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>

<h3 id="（二）、安装php-fpm"><a href="#（二）、安装php-fpm" class="headerlink" title="（二）、安装php-fpm"></a>（二）、安装php-fpm</h3><p>nginx本身不能处理PHP，它只是个web服务器，当接收到请求后，如果是php请求，则发给php解释器处理，并把结果返回给客户端。<br>nginx一般是把请求发fastcgi管理进程处理，fascgi管理进程选择cgi子进程处理结果并返回被nginx</p>
<p>此处采用php-fpm使nginx支持PHP<br>1、安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc automake autoconf libtool make</span><br><span class="line"> </span><br><span class="line">yum -y install gcc gcc-c++ glibc</span><br><span class="line"> </span><br><span class="line">yum -y install libmcrypt-devel mhash-devel libxslt-devel </span><br><span class="line">libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel </span><br><span class="line">zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel </span><br><span class="line">ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel </span><br><span class="line">krb5 krb5-devel libidn libidn-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<p>2、获取php-fpm的tar包<br><code>wget http://cn2.php.net/distributions/php-5.4.7.tar.gz</code></p>
<p>3、解压、预编译及安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zvxf php-5.4.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> php-5.4.7</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php  --enable-fpm --with-mcrypt </span><br><span class="line">--enable-mbstring --disable-pdo --with-curl --disable-debug  --disable-rpath </span><br><span class="line">--enable-inline-optimization --with-bz2  --with-zlib --enable-sockets </span><br><span class="line">--enable-sysvsem --enable-sysvshm --enable-pcntl --enable-mbregex </span><br><span class="line">--with-mhash --enable-zip --with-pcre-regex --with-mysql --with-mysqli </span><br><span class="line">--with-gd --with-jpeg-dir</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>4、修改php-fpm配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先创建运行php和nginx的用户</span></span><br><span class="line"><span class="comment">#创建用户组</span></span><br><span class="line">groupadd www-data</span><br><span class="line"><span class="comment">#创建用户，所属组为www-data</span></span><br><span class="line">useradd -s /bin/bash -m -g www-data www-data</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/php/etc</span><br><span class="line">cp ./php-fpm.conf.default php-fpm.conf</span><br><span class="line">vim php-fpm.conf</span><br><span class="line"><span class="comment">#修改下列内容</span></span><br><span class="line">pid = /usr/<span class="built_in">local</span>/php/var/run/php-fpm.pid</span><br><span class="line">vim ./php-fpm.d/www.conf</span><br><span class="line"><span class="comment">#修改下列内容</span></span><br><span class="line">user = www-data</span><br><span class="line">group = www-data</span><br><span class="line"></span><br><span class="line">pm.max_children = 150</span><br><span class="line">pm.start_servers = 8</span><br><span class="line">pm.min_spare_servers = 5</span><br><span class="line">pm.max_spare_servers = 10</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/conf</span><br><span class="line"><span class="comment">#在其中的serve段增加如下配置，</span></span><br><span class="line"><span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">location ~ .php$ &#123;</span><br><span class="line">root html;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、配置完成，在nginx根目录下创建php文件测试能否正常使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/html</span><br><span class="line">touch index.php</span><br><span class="line">vim index.php</span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>

<p>6、使用浏览器访问</p>
<p><img src="23.png" alt="23"></p>
<h3 id="（三）、源码安装mysql"><a href="#（三）、源码安装mysql" class="headerlink" title="（三）、源码安装mysql"></a>（三）、源码安装mysql</h3><p>1、首先检查所用的linux安装过mysql，并卸载CentOS7默认携带的mariadb包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查mysql和mariadb包</span></span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line">rpm -qa | grep -i mariadb</span><br><span class="line"><span class="comment">#卸载查到的mariadb包</span></span><br><span class="line">rpm -e mariadb-libs-5.5.60-1.el7_5.x86_64</span><br><span class="line"><span class="comment">#有依赖关系，使用yum卸载</span></span><br><span class="line">yum remove mariadb-libs-5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></table></figure>

<p>2、从mysql官网获取mysql源码文件<br>下载地址<code>https://downloads.mysql.com/archives/community/</code>，确定mysql版本后选择Source Code+Generic Linux(通用linux)如下图所示：<br><img src="24.png" alt="24"></p>
<p>3、下载tar包，并将下载的tar包解压缩<br><code>wget https://downloads.mysql.com/archives/get/file/mysql-5.7.24.tar.gz</code><br><code>tar -zxvf mysql-5.7.24.tar.gz</code></p>
<p>4、安装编译软件和依赖<br>#首先更新系统软件<br><code>yum update</code><br><code>yum install -y cmake make gcc gcc-c++ wget ncurses-devel cmake make perl ncurses-devel openssl-devel bison-devel libaio libaio-devel</code></p>
<p>5、创建mysql用户和用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"><span class="comment"># 创建mysql用户，所属组为mysql</span></span><br><span class="line">useradd -s /bin/bash -m -g mysql mysql</span><br></pre></td></tr></table></figure>

<p>6、创建mysql相关目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| 目录 | 含义 | 配置参数 |</span><br><span class="line">| :——— | ————————————– | —————————————- |</span><br><span class="line">| bin_log | 二进制日志目录 | log_bin_basename</span><br><span class="line">log_bin_index |</span><br><span class="line">| mydata | 数据文件目录 | datadir |</span><br><span class="line">| innodb_log | InnoDB重做日志目录 | innodb_log_group_home_dir |</span><br><span class="line">| innodb_ts | InnoDB共享表空间目录 | innodb_data_home_dir |</span><br><span class="line">| <span class="built_in">log</span> | 日志文件目录(error <span class="built_in">log</span>+general <span class="built_in">log</span>+slow <span class="built_in">log</span>) | log_error</span><br><span class="line">general_log_file</span><br><span class="line">slow_query_log_file |</span><br><span class="line">| relay_log | InnoDB中继日志目录 | relay_log_basename</span><br><span class="line">relay_log_index |</span><br><span class="line">| tmpdir | 临时文件目录 | tmpdir |</span><br><span class="line">| undo_log | InnoDB回滚日志目录 | innodb_undo_directory |</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/mysql/data/bin_log</span><br><span class="line">mkdir -p /home/mysql/data/db_file</span><br><span class="line">mkdir -p /home/mysql/data/innodb_log</span><br><span class="line">mkdir -p /home/mysql/data/innodb_ts</span><br><span class="line">mkdir -p /home/mysql/data/<span class="built_in">log</span></span><br><span class="line">mkdir -p /home/mysql/data/relay_log</span><br><span class="line">mkdir -p /home/mysql/data/tmpdir</span><br><span class="line">mkdir -p /home/mysql/data/undo_log</span><br></pre></td></tr></table></figure>

<p>7、设置创建的目录的所属用户和所属组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R mysql:mysql /home/mysql/data</span><br><span class="line">chown -R mysql:mysql /usr/<span class="built_in">local</span>/mysql</span><br></pre></td></tr></table></figure>

<p>8、编译安装MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到mysql-5.7.16源码目录下</span></span><br><span class="line"><span class="built_in">cd</span> /home/<span class="built_in">source</span>/mysql-5.7.16</span><br><span class="line"><span class="comment"># cmake</span></span><br><span class="line">cmake \</span><br><span class="line">-DCMAKE_BUILD_TYPE=RelWithDebInfo \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/usr/<span class="built_in">local</span>/mysql/mysql.sock \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DMYSQL_DATADIR=/home/mysql/data \</span><br><span class="line">-DSYSCONFDIR=/etc/my.cnf \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">-DENABLE_DEBUG_SYNC=0 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DENABLED_PROFILING=1 \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DWITH_DEBUG=0 \</span><br><span class="line">-DWITH_SSL=yes \</span><br><span class="line">-DWITH_BOOST=/usr/<span class="built_in">local</span>/boost/boost_1_59_0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：如果编译出现错误，请先删除CMakeCache.txt后，再重新编译：</span></span><br><span class="line">rm -rf CMakeCache.txt</span><br><span class="line">wget http://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</span><br><span class="line"><span class="comment">#同时cmake 选项中的如下</span></span><br><span class="line">-DDOWNLOAD_BOOST=1 \</span><br><span class="line">-DWITH_BOOST=/usr/<span class="built_in">local</span>/boost</span><br><span class="line"><span class="comment">#改成：</span></span><br><span class="line">-DWITH_BOOST=/usr/<span class="built_in">local</span>/boost/boost_1_59_0.tar.gz</span><br><span class="line"><span class="comment"># make </span></span><br><span class="line"><span class="comment"># 该命令中可以通过添加-j参数指定多线程工作，如make -j2 &amp;&amp; make install -j2 则使用2个CPU核进行make</span></span><br><span class="line"><span class="comment"># 该步骤执行完毕后，可以到CMAKE_INSTALL_PREFIX参数指定的目录下，即MySQL安装目录下查看到mysql相关目录与文件</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cmake 参数解释</span></span><br><span class="line"><span class="comment">#cmake参数解释如下：</span></span><br><span class="line">DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql:安装路径</span><br><span class="line">DMYSQL_DATADIR=/data/mysql:数据文件存放位置</span><br><span class="line">DSYSCONFDIR=/etc:my.cnf路径</span><br><span class="line">DWITH_MYISAM_STORAGE_ENGINE=1:支持MyIASM引擎</span><br><span class="line">DWITH_INNOBASE_STORAGE_ENGINE=1:支持InnoDB引擎</span><br><span class="line">DMYSQL_UNIX_ADDR=/data/mysql/mysqld.sock:连接数据库socket路径</span><br><span class="line">DMYSQL_TCP_PORT=3306:端口</span><br><span class="line">DENABLED_LOCAL_INFILE=1:允许从本地导入数据</span><br><span class="line">DWITH_PARTITION_STORAGE_ENGINE=1:安装支持数据库分区</span><br><span class="line">DEXTRA_CHARSETS=all:安装所有的字符集</span><br><span class="line">DDEFAULT_CHARSET=utf8:默认字符</span><br><span class="line">DWITH_EMBEDDED_SERVER=1:嵌入式服务器</span><br></pre></td></tr></table></figure>

<p>9、设置开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chmod +x /etc/init.d/mysqld</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/mysql/bin/* /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure>

<p>10、初始化MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拷贝my.cnf至/etc/目录下</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/mysql/support-files/my-default.cnf /etc/my.cnf</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="comment">#添加如下配置</span></span><br><span class="line"><span class="comment">#配置安装目录和数据目录</span></span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir = /home/mysql/data</span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size = 128M</span><br><span class="line">explicit_defaults_for_timestamp=<span class="literal">true</span></span><br><span class="line">socket=/usr/<span class="built_in">local</span>/web/mysql/mysql.sock</span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error = /home/mysql/data/error.log</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到MySQL安装目录下bin目录</span></span><br><span class="line"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/web/mysql/bin</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 初始化MySQL，切记--defaults-file=/etc/my.cnf要放在参数的第一位，初始化信息可以在MySQL的errorlog中查看，并且在errorlog会生成一个root的随机密码，该随机密码仅仅为root@localhost用户所有。</span></span><br><span class="line"> mysqld --defaults-file=/etc/my.cnf --initialize --basedir=/usr/<span class="built_in">local</span>/web/mysql --datadir=/home/mysql/data  --user=mysql</span><br></pre></td></tr></table></figure>

<p>11、启动MySQL服务<br>（1）、添加MySQL环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 在~/.bashrc文件下添加如下语句</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/web/mysql/bin:/usr/<span class="built_in">local</span>/web/mysql/lib/</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="comment"># 保存后，使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<p>（2）、启动MySQL<br><code>mysqld_safe --defaults-file=/etc/my.cnf &amp;</code><br>或者 <code>service mysqld start</code></p>
<p>12、登陆MySQL并修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br><span class="line"><span class="comment">#MySQL 5.7 版本：</span></span><br><span class="line">UPDATE mysql.user SET authentication_string=PASSWORD(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> USER=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment">#刷新：</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment">#退出：</span></span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"><span class="comment">#设置完之后，输入 mysql -u root -p，这时输入刚设置的密码，就可以登进数据库了。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yum安装mysql</span></span><br><span class="line"><span class="comment">#1、检查MariaDB是否安装</span></span><br><span class="line">yum list installed | grep mariadb</span><br><span class="line"><span class="comment">#2. 卸载全部 MariaDB 相关</span></span><br><span class="line">yum -y remove mariadb*</span><br><span class="line"><span class="comment">#3. 下载 MySQL 的 YUM 源</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="comment">#4. 安装 MySQL 的 YUM 源</span></span><br><span class="line">rpm -ivh mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="comment">#5. 检查 MySQL 的 YUM 源是否安装成功</span></span><br><span class="line">yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span></span><br><span class="line"><span class="comment">#6. 查看 MySQL 版本</span></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line"><span class="comment">#7. 安装 MySQL</span></span><br><span class="line">yum install mysql-community-server</span><br><span class="line"><span class="comment">#一直输 y 就可以了。</span></span><br><span class="line"><span class="comment">#8. 启动 MySQL 服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="comment">#9. 测试连接 MySQL 服务</span></span><br><span class="line">mysql -u root 或者 mysql</span><br><span class="line"><span class="comment">#提示:</span></span><br><span class="line"><span class="comment">#刚安装的 MySQL 是没有密码的，这时如果出现：</span></span><br><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: NO)，解决如下：</span><br><span class="line"><span class="comment">#停止 MySQL 服务：systemctl stop mysqld </span></span><br><span class="line"><span class="comment">#以不检查权限的方式启动 </span></span><br><span class="line">MySQL: mysqld --user=root --skip-grant-tables &amp;</span><br><span class="line"><span class="comment">#再次输入 mysql -u root 或者 mysql，这次就可以进来了。</span></span><br><span class="line"><span class="comment">#更新密码：</span></span><br><span class="line"><span class="comment">#MySQL 5.7 以下版本：</span></span><br><span class="line">UPDATE mysql.user SET Password=PASSWORD(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> USER=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment">#MySQL 5.7 版本：</span></span><br><span class="line">UPDATE mysql.user SET authentication_string=PASSWORD(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> USER=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment">#刷新：</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment">#退出：</span></span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"><span class="comment">#设置完之后，输入 mysql -u root -p，这时输入刚设置的密码，就可以登进数据库了。</span></span><br></pre></td></tr></table></figure>

<p>13、php连接mysql<br>php连接mysql共有两种方式，MySQL和PDO<br>MySQLi值针对MySQLi数据库，若项目需要在多种数据库内切换则建议使用PDO。<br>两者都是面向对象, 但 MySQLi 还提供了 API 接口。两者都支持预处理语句，可防止 SQL 注入。<br>在<code>/usr/local/nginx/html</code>创建<code>mysqlLink.php</code>测试使用php连接mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">// 创建连接</span><br><span class="line"><span class="variable">$conn</span> = new mysqli(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">// 检测连接</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    die(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="25.png" alt="25"></p>
<h2 id="四、安全加固"><a href="#四、安全加固" class="headerlink" title="四、安全加固"></a>四、安全加固</h2><h3 id="（一）、nginx加固"><a href="#（一）、nginx加固" class="headerlink" title="（一）、nginx加固"></a>（一）、nginx加固</h3><p>1、禁止某些文件类型的访问<br>某些文件不小心传如web目录后存在很大风险。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location *.(txt|doc|docx|rar)$ &#123;</span><br><span class="line">    root /var/www/www.xxx.xxx;</span><br><span class="line">    Deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、修改nginx的运行用户为www-data<br><code>user  www-data;</code></p>
<h3 id="（二）、mysql加固"><a href="#（二）、mysql加固" class="headerlink" title="（二）、mysql加固"></a>（二）、mysql加固</h3><p>1、删除默认数据和帐户<br>Mysql默认会有空用户和test库<br>删除test库和除root外帐户再按照业务需求添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database <span class="built_in">test</span>;</span><br><span class="line">mysql&gt; delete from user <span class="built_in">where</span> not (user=’root’);</span><br></pre></td></tr></table></figure>
<p>2、更改root帐户名称<br>Mysql管理员帐号默认名称为root，存在被爆破的风险.<br>更改root帐户名称以增大爆破成本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; update user <span class="built_in">set</span> user=’newrootname’ <span class="built_in">where</span> user=’root’;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<p>3、限制用户的连接<br>同个用户可以多个远程链接，会导致性能下降.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改my.cnf中max_user_connections</span></span><br><span class="line">vim /etc/my.cnf </span><br><span class="line">max_user_connections 150</span><br></pre></td></tr></table></figure>
<p>4、目录权限限制<br>mysql默认安装在/usr/local/mysql下，数据库文件在/usr/local/mysql/var下，权限不正确会导致数据存在被COPY走的风险.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改目录所有者 </span></span><br><span class="line">chown -R root /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">chown -R mysql.mysql /usr/<span class="built_in">local</span>/mysql/var/</span><br></pre></td></tr></table></figure>
<p>5、历史命令泄漏<br>linux的历史命令可能会泄漏mysql的帐号密码等信息.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 限制历史命令记录为一个较小的数 </span></span><br><span class="line">vim ~/.bash_profile </span><br><span class="line">HISTSIZE=3 </span><br><span class="line">HISTFLESIZE=3</span><br><span class="line"><span class="comment"># 限制不记录某些命令 </span></span><br><span class="line"><span class="built_in">export</span> HISTCONTROL=ignorespace <span class="comment"># 你在执行任何命令前只需要加一个空格就不会记录 </span></span><br><span class="line"><span class="comment"># 定时清除历史命令 </span></span><br><span class="line"><span class="built_in">history</span> -c</span><br></pre></td></tr></table></figure>
<p>6、限制访问数据的IP<br>不要使用%来设置来源IP，指定精确的来源IP限制.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grant selete on database.table to ‘app’@’xx.xx.xx.xx’ identified by ‘password’ with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h3 id="（三）、ssh加固"><a href="#（三）、ssh加固" class="headerlink" title="（三）、ssh加固"></a>（三）、ssh加固</h3><p><code>vim sshd_config</code><br>1、Port<br>系统缺省使用 22 号端口，将监听端口更改为其他数值（最好是1024以上的高端口，以免和其他常规服务端口冲突），这样可以增加入侵者探测系统是否运行了sshd守护进程的难度。（修改端口不成功则需要在防火墙和selinux中开放端口）<br><code>Port 10022</code></p>
<p>2、X11Forwarding<br>关闭X11Forwarding，防止会话被劫持。<br><code>X11Forwarding no</code></p>
]]></content>
      <categories>
        <category>信安之路学习</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>第三周：数据库系统表相关学习</title>
    <url>/2019/09/04/third-week-work/</url>
    <content><![CDATA[<h1 id="数据库系统表相关学习"><a href="#数据库系统表相关学习" class="headerlink" title="数据库系统表相关学习"></a>数据库系统表相关学习</h1><p>Date：第三周<br>Auther：胖花<br>Blog：<a href="http://peana.github.io/2019/09/04/third-week-work/">http://peana.github.io/2019/09/04/third-week-work/</a></p>
<h1 id="一、如何利用数据库读取文件"><a href="#一、如何利用数据库读取文件" class="headerlink" title="一、如何利用数据库读取文件"></a>一、如何利用数据库读取文件</h1><p><strong>读取方法：1.load_file()    2. load data infile()</strong></p>
<h2 id="1-1-load-file"><a href="#1-1-load-file" class="headerlink" title="1.1 load_file()"></a>1.1 load_file()</h2><ul>
<li>成功执行的前提条件：<pre><code>  1. 运行mysql进程的用户拥有文件读权限
</code></pre>
  ps 命令中的 <code>-u</code> 参数为查看进程用户<pre><code>  2. 文件在该sql服务器上
  3. 路径完整
  4. 文件大小小于`max_allowed_packet`
  5. secure_file_priv不为NULL
</code></pre>
  查看secure_file_priv值：<code>show global variables like &quot;secure_file_priv&quot;</code><pre><code>  - 若为NULL，修改方法如下：
</code></pre>
  windows：修改mysql.ini 文件，在[mysqld] 下添加条目: secure_file_priv =<br>  linux： 修改/etc/my.cnf的[mysqld]下面添加local-infile=0<pre><code>  - 若`secure_file_priv`为具体某目录，一般为`/var/lib/mysql-files/`则此时只可对该目录下的文件进行读写操作
  - 若为空，则可操作服务器中权限允许下的全部目录
</code></pre>
</li>
<li>使用方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 读取文件以字符串形式插入表中，然后去读表中数据</span><br><span class="line">create table readFile(txt text);</span><br><span class="line">insert into readFile (txt) values (load_file(&#39;&#x2F;etc&#x2F;passwd&#39;));</span><br><span class="line">select * from readFile;</span><br><span class="line">#2. 直接使用select 命令查看</span><br><span class="line">select load_file(&#39;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;test.txt&#39;)\G</span><br><span class="line">#3. 使用SELECT...INTO OOUTFILE将load_file函数读取的信息写入文件</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>拓展用法：利用load_file函数和DNSlog获取sql盲注回显：<a href="https://bbs.ichunqiu.com/thread-22002-1-1.html?from=timeline">利用DNSLOG获取看不到的信息（给盲注带上眼镜）</a></p>
</blockquote>
<h2 id="1-2-load-data-infile"><a href="#1-2-load-data-infile" class="headerlink" title="1.2 load data infile()"></a>1.2 load data infile()</h2><ul>
<li><p>成功执行的前提条件：同上</p>
</li>
<li><p>使用方法：<br><code>load data infile &#39;/var/lib/mysql-files/test.txt&#39; into table readFile;</code><br><code>select * from readFile;</code></p>
</li>
<li><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE &#39;file_name&#39;</span><br><span class="line">[REPLACE | IGNORE]</span><br><span class="line">INTO TABLE tbl_name</span><br><span class="line">[PARTITION (partition_name,...)]</span><br><span class="line">[CHARACTER SET charset_name]</span><br><span class="line">[&#123;FIELDS | COLUMNS&#125;</span><br><span class="line">[TERMINATED BY &#39;string&#39;]</span><br><span class="line">[[OPTIONALLY] ENCLOSED BY &#39;char&#39;]</span><br><span class="line">[ESCAPED BY &#39;char&#39;]</span><br><span class="line">]</span><br><span class="line">[LINES</span><br><span class="line">[STARTING BY &#39;string&#39;]</span><br><span class="line">[TERMINATED BY &#39;string&#39;]</span><br><span class="line">]</span><br><span class="line">[IGNORE number &#123;LINES | ROWS&#125;]</span><br><span class="line">[(col_name_or_user_var,...)]</span><br><span class="line">[SET col_name &#x3D; expr,...]</span><br></pre></td></tr></table></figure></li>
<li><p>学习资料<br><a href="https://www.cnblogs.com/c1e4r/articles/8618692.html">https://www.cnblogs.com/c1e4r/articles/8618692.html</a><br><a href="https://xz.aliyun.com/t/3973">https://xz.aliyun.com/t/3973</a><br><a href="https://www.smi1e.top/mysql-load-data-%E8%AF%BB%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6/">https://www.smi1e.top/mysql-load-data-%E8%AF%BB%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6/</a><br><a href="https://cloud.tencent.com/developer/article/1426503">https://cloud.tencent.com/developer/article/1426503</a><br><a href="https://www.anquanke.com/post/id/173039">https://www.anquanke.com/post/id/173039</a></p>
<h1 id="二、mysql系统表"><a href="#二、mysql系统表" class="headerlink" title="二、mysql系统表"></a>二、mysql系统表</h1><p>本单元学习汇总自：<a href="https://cloud.tencent.com/developer/article/1340819">MySQL常用系统表汇总</a>、<a href="https://blog.csdn.net/huwei0518/article/details/43563583">Mysql数据库主要系统表说明</a>、<a href="https://blog.csdn.net/xlxxcc/article/details/51754524">MySQL常用系统表大全</a></p>
<h2 id="MySQL5-7默认模式"><a href="#MySQL5-7默认模式" class="headerlink" title="MySQL5.7默认模式"></a>MySQL5.7默认模式</h2><table>
<thead>
<tr>
<th>库名</th>
<th>表数量</th>
<th>视图数量</th>
</tr>
</thead>
<tbody><tr>
<td>information_schema</td>
<td>61</td>
<td>0</td>
</tr>
<tr>
<td>mysql</td>
<td>32</td>
<td>0</td>
</tr>
<tr>
<td>performance_schema</td>
<td>87</td>
<td>0</td>
</tr>
<tr>
<td>sys</td>
<td>1</td>
<td>100</td>
</tr>
</tbody></table>
<h2 id="Information-schema"><a href="#Information-schema" class="headerlink" title="Information_schema"></a>Information_schema</h2><p>由MySQL自带，它提供了访问数据库元数据的方式</p>
<h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。</p>
</li>
</ul>
<p>在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件</p>
<h3 id="information-schema-数据库部分表说明"><a href="#information-schema-数据库部分表说明" class="headerlink" title="information_schema 数据库部分表说明"></a>information_schema 数据库部分表说明</h3><table>
<thead>
<tr>
<th align="left">表名</th>
<th align="left">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SCHEMATA</td>
<td align="left">提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表</td>
</tr>
<tr>
<td align="left">TABLES</td>
<td align="left">提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema、表类型、表引擎、创建时间等信息。是show tables from schemaname的结果取之此表</td>
</tr>
<tr>
<td align="left">COLUMNS</td>
<td align="left">提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表</td>
</tr>
<tr>
<td align="left">STATISTICS</td>
<td align="left">提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表</td>
</tr>
<tr>
<td align="left">USER_PRIVILEGES</td>
<td align="left">用户权限表:给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表</td>
</tr>
<tr>
<td align="left">SCHEMA_PRIVILEGES</td>
<td align="left">方案权限表:给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表</td>
</tr>
<tr>
<td align="left">TABLE_PRIVILEGES</td>
<td align="left">表权限表:给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表</td>
</tr>
<tr>
<td align="left">COLUMN_PRIVILEGES</td>
<td align="left">列权限表:给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表</td>
</tr>
<tr>
<td align="left">CHARACTER_SETS</td>
<td align="left">字符集表:提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表</td>
</tr>
<tr>
<td align="left">COLLATIONS</td>
<td align="left">提供了关于各字符集的对照信息</td>
</tr>
<tr>
<td align="left">COLLATION_CHARACTER_SET_APPLICABILITY</td>
<td align="left">指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。</td>
</tr>
<tr>
<td align="left">TABLE_CONSTRAINTS</td>
<td align="left">描述了存在约束的表。以及表的约束类型</td>
</tr>
<tr>
<td align="left">KEY_COLUMN_USAGE</td>
<td align="left">描述了具有约束的键列</td>
</tr>
<tr>
<td align="left">ROUTINES</td>
<td align="left">提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列</td>
</tr>
<tr>
<td align="left">VIEWS</td>
<td align="left">给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息</td>
</tr>
<tr>
<td align="left">TRIGGERS</td>
<td align="left">提供了关于触发程序的信息。必须有super权限才能查看该表</td>
</tr>
</tbody></table>
<h2 id="performance-schema"><a href="#performance-schema" class="headerlink" title="performance_schema"></a>performance_schema</h2><p>PERFORMANCE_SCHEMA这个功能默认是关闭的。需要设置参数： performance_schema 才可以启动该功能，这个参数是静态参数，只能写在my.cnf 中 不能动态修改。</p>
<h3 id="performance-schema数据库部分表说明"><a href="#performance-schema数据库部分表说明" class="headerlink" title="performance_schema数据库部分表说明"></a>performance_schema数据库部分表说明</h3><table>
<thead>
<tr>
<th align="left">表名</th>
<th align="left">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">setup_table</td>
<td align="left">设置表，配置监控选项</td>
</tr>
<tr>
<td align="left">current_events_table</td>
<td align="left">记录当前那些thread 正在发生什么事情</td>
</tr>
<tr>
<td align="left">history_table</td>
<td align="left">发生的各种事件的历史记录表</td>
</tr>
<tr>
<td align="left">summary_table</td>
<td align="left">对各种事件的统计表</td>
</tr>
<tr>
<td align="left">setup_consumers\setup_instruments</td>
<td align="left">描述各种事件, 设置哪些事件能够被收集</td>
</tr>
<tr>
<td align="left">setup_instruments</td>
<td align="left">描述这个数据库下的表名以及是否开启监控</td>
</tr>
<tr>
<td align="left">setup_timers</td>
<td align="left">描述监控选项已经采样频率的时间间隔</td>
</tr>
<tr>
<td align="left">threads</td>
<td align="left">监控服务器所有连接</td>
</tr>
<tr>
<td align="left">performance_timers</td>
<td align="left">设置一些监控信息, 指定mysql服务可用的监控周期，CYCLE表示按每秒检测2603393034次, 目前 performance-schema 只支持’wait’时间的监控，代码树上 wait/ 下的函数都可以监控到</td>
</tr>
</tbody></table>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>在mysql数据库中，有mysql_install_db脚本初始化权限表，存储权限的表</p>
<h3 id="mysql数据库部分表说明"><a href="#mysql数据库部分表说明" class="headerlink" title="mysql数据库部分表说明"></a>mysql数据库部分表说明</h3><table>
<thead>
<tr>
<th align="left">表名</th>
<th align="left">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">user</td>
<td align="left">用户列、权限列、安全列、资源控制列</td>
</tr>
<tr>
<td align="left">db</td>
<td align="left">用户列、权限列</td>
</tr>
<tr>
<td align="left">host</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">table_priv</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">columns_priv</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">proc_priv</td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><p>sys_config ： 这是在这个系统库上存在的唯一一个表</p>
<h3 id="sys数据库表说明"><a href="#sys数据库表说明" class="headerlink" title="sys数据库表说明"></a>sys数据库表说明</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_config` (</span><br><span class="line">  `variable` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="keyword">value</span>` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `set_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `set_by` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`variable`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<ul>
<li>variable ： 配置选项名称</li>
<li>value    ： 配置选项值</li>
<li>set_time ： 该行配置修改的时间</li>
<li>set_by   ： 该行配置信息修改者，如果从被安装没有修改过，那么这个数据应该为NULL</li>
</ul>
<table>
<thead>
<tr>
<th>配置选项名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>diagnostics.allow_i_s_tables</td>
<td>默认为OFF ，如果开启表示允许diagnostics() 存储过程执行扫描information_schema.tables 表，如果表很多，那么可能会很耗性能</td>
</tr>
<tr>
<td>diagnostics.include_raw</td>
<td>默认为OFF,开启将会从metrics 视图输出未加工处理的数据</td>
</tr>
<tr>
<td>statement_performance_analyzer.limit</td>
<td>视图在没有加limit限制时，返回的最大行数</td>
</tr>
<tr>
<td>statement_truncate_len</td>
<td>通过format_statement()函数返回值的最大长度</td>
</tr>
<tr>
<td>debug</td>
<td>这个表非默认选项还有一个@sys.debug参数,可以手动加入<br>INSERT INTO sys_config (variable, value) VALUES(‘debug’, ‘ON’);<br>UPDATE sys_config SET value = ‘OFF’ WHERE variable = ‘debug’;<br>SET @sys.debug = NULL;</td>
</tr>
<tr>
<td>INSERT INTO sys_config (variable, value) VALUES(‘debug’, ‘ON’);</td>
<td></td>
</tr>
<tr>
<td>UPDATE sys_config SET value = ‘OFF’ WHERE variable = ‘debug’;</td>
<td></td>
</tr>
<tr>
<td>SET @sys.debug = NULL;</td>
<td></td>
</tr>
</tbody></table>
<h3 id="sys-config的两个触发器"><a href="#sys-config的两个触发器" class="headerlink" title="sys_config的两个触发器"></a>sys_config的两个触发器</h3><p><strong>sys_config_insert_set_user触发器</strong><br>如果加入新行通过insert语句，那么这个触发器会把set_by列设置为当前操作者</p>
<p><strong>sys_config_update_set_user触发器</strong><br>如果加入新行通过update语句，那么这个触发器会把set_by列设置为当前操作者</p>
<h1 id="三、查询用户hash，使用hashcat爆破"><a href="#三、查询用户hash，使用hashcat爆破" class="headerlink" title="三、查询用户hash，使用hashcat爆破"></a>三、查询用户hash，使用hashcat爆破</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查看<span class="keyword">sql</span>用户密码</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,authentication_string <span class="keyword">from</span>  mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> authentication_string                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> test <span class="operator">|</span> <span class="operator">*</span>B26F1F68545E03329BCF36B143376E1249C936CE <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="3-1-在线破解hash"><a href="#3-1-在线破解hash" class="headerlink" title="3.1 在线破解hash"></a>3.1 在线破解hash</h2><p><a href="https://www.somd5.com/">https://www.somd5.com/</a></p>
<p><img src="1.jpg" alt="1"></p>
<h2 id="3-2-使用hashcat"><a href="#3-2-使用hashcat" class="headerlink" title="3.2 使用hashcat"></a>3.2 使用hashcat</h2><h3 id="3-2-1-处理kali中的hashcat报错信息"><a href="#3-2-1-处理kali中的hashcat报错信息" class="headerlink" title="3.2.1 处理kali中的hashcat报错信息"></a>3.2.1 处理kali中的hashcat报错信息</h3><p>使用kali自带的hashcat 一开始报错<code>No device found/left</code>，百度得知缺少驱动’OpenCL’</p>
<p><img src="2.png" alt="2"></p>
<p>登录opencl官网下载安装包（现在需要先注册intel会员）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf l_opencl_p_18.1.0.015.tgz</span><br><span class="line"><span class="built_in">cd</span> /opt/l_opencl_p_18.1.0.015</span><br><span class="line">bash install.sh</span><br><span class="line"><span class="comment">#按照提示进行安装</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-利用hashcat破解上文中的mysql用户的hash值"><a href="#3-2-2-利用hashcat破解上文中的mysql用户的hash值" class="headerlink" title="3.2.2 利用hashcat破解上文中的mysql用户的hash值"></a>3.2.2 利用hashcat破解上文中的mysql用户的hash值</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># hashcat -a 3 -m300 -1 Ttestafg1234@#$ --force B26F1F68545E03329BCF36B143376E1249C936CE  ?1?1?1?1?1?1?1?1?1 </span></span><br><span class="line">hashcat (v5.1.0) starting...</span><br><span class="line"></span><br><span class="line">* Device <span class="comment">#2: This device&#x27;s constant buffer size is too small.</span></span><br><span class="line"></span><br><span class="line">* Device <span class="comment">#2: This device&#x27;s local mem size is too small.</span></span><br><span class="line"></span><br><span class="line">OpenCL Platform <span class="comment">#1: Intel(R) Corporation</span></span><br><span class="line">========================================</span><br><span class="line">* Device <span class="comment">#1: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz, 491/1966 MB allocatable, 8MCU</span></span><br><span class="line"></span><br><span class="line">OpenCL Platform <span class="comment">#2: The pocl project</span></span><br><span class="line">====================================</span><br><span class="line">* Device <span class="comment">#2: pthread-Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz, skipped.</span></span><br><span class="line"></span><br><span class="line">INFO: All hashes found <span class="keyword">in</span> potfile! Use --show to display them.</span><br><span class="line"></span><br><span class="line">Started: Wed Sep 25 16:53:35 2019</span><br><span class="line">Stopped: Wed Sep 25 16:53:35 2019</span><br><span class="line">root@kali:~<span class="comment"># hashcat -a 3 -m300 -1 Ttestafg1234@#$ --force B26F1F68545E03329BCF36B143376E1249C936CE  ?1?1?1?1?1?1?1?1?1 --show</span></span><br><span class="line">b26f1f68545e03329bcf36b143376e1249c936ce:Test@1234</span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-hashcat-使用详解"><a href="#3-2-3-hashcat-使用详解" class="headerlink" title="3.2.3 hashcat 使用详解"></a>3.2.3 hashcat 使用详解</h3><p><code>hashcat --help</code><br><strong>参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a  指定要使用的破解模式，其值参考后面对参数。“-a 0”字典攻击，“-a 1” 组合攻击；“-a 3”掩码攻击。</span><br><span class="line">-m  指定要破解的<span class="built_in">hash</span>类型，如果不指定类型，则默认是MD5</span><br><span class="line">-o  指定破解成功后的<span class="built_in">hash</span>及所对应的明文密码的存放位置,可以用它把破解成功的<span class="built_in">hash</span>写到指定的文件中</span><br><span class="line">--force 忽略破解过程中的警告信息,跑单条<span class="built_in">hash</span>可能需要加上此选项</span><br><span class="line">--show  显示已经破解的<span class="built_in">hash</span>及该<span class="built_in">hash</span>所对应的明文</span><br><span class="line">--increment  启用增量破解模式,你可以利用此模式让hashcat在指定的密码长度范围内执行破解过程</span><br><span class="line">--increment-min  密码最小长度,后面直接等于一个整数即可,配置increment模式一起使用</span><br><span class="line">--increment-max  密码最大长度,同上</span><br><span class="line">--outfile-format 指定破解结果的输出格式id,默认是3</span><br><span class="line">--username   忽略<span class="built_in">hash</span>文件中的指定的用户名,在破解linux系统用户密码<span class="built_in">hash</span>可能会用到</span><br><span class="line">--remove     删除已被破解成功的<span class="built_in">hash</span></span><br><span class="line">-r       使用自定义破解规则</span><br></pre></td></tr></table></figure>
<p><strong>攻击模式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># | Mode</span><br><span class="line"> &#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">  0 | Straight（字段破解）</span><br><span class="line">  1 | Combination（组合破解）</span><br><span class="line">  3 | Brute-force（掩码暴力破解）</span><br><span class="line">  6 | Hybrid Wordlist + Mask（字典+掩码破解）</span><br><span class="line">  7 | Hybrid Mask + Wordlist（掩码+字典破解）</span><br></pre></td></tr></table></figure>
<p><strong>Hash id 对照表</strong></p>
<table>
<thead>
<tr>
<th>num</th>
<th>Name</th>
<th>Category</th>
</tr>
</thead>
<tbody><tr>
<td>900</td>
<td>MD4</td>
<td>RawHash</td>
</tr>
<tr>
<td>0</td>
<td>MD5</td>
<td>RawHash</td>
</tr>
<tr>
<td>5100</td>
<td>HalfMD5</td>
<td>RawHash</td>
</tr>
<tr>
<td>100</td>
<td>SHA1</td>
<td>RawHash</td>
</tr>
<tr>
<td>1300</td>
<td>SHA2-224</td>
<td>RawHash</td>
</tr>
<tr>
<td>1400</td>
<td>SHA2-256</td>
<td>RawHash</td>
</tr>
<tr>
<td>10800</td>
<td>SHA2-384</td>
<td>RawHash</td>
</tr>
<tr>
<td>1700</td>
<td>SHA2-512</td>
<td>RawHash</td>
</tr>
<tr>
<td>17300</td>
<td>SHA3-224</td>
<td>RawHash</td>
</tr>
<tr>
<td>17400</td>
<td>SHA3-256</td>
<td>RawHash</td>
</tr>
<tr>
<td>17500</td>
<td>SHA3-384</td>
<td>RawHash</td>
</tr>
<tr>
<td>17600</td>
<td>SHA3-512</td>
<td>RawHash</td>
</tr>
<tr>
<td>10</td>
<td>md5($pass.$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>20</td>
<td>md5($salt.$pass)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>30</td>
<td>md5(utf16le($pass).$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>40</td>
<td>md5($salt.utf16le($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>3800</td>
<td>md5($salt.$pass.$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>3710</td>
<td>md5($salt.md5($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>4010</td>
<td>md5($salt.md5($salt.$pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>4110</td>
<td>md5($salt.md5($pass.$salt))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>2600</td>
<td>md5(md5($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>3910</td>
<td>md5(md5($pass).md5($salt))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>4300</td>
<td>md5(strtoupper(md5($pass)))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>4400</td>
<td>md5(sha1($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>110</td>
<td>sha1($pass.$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>120</td>
<td>sha1($salt.$pass)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>130</td>
<td>sha1(utf16le($pass).$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>140</td>
<td>sha1($salt.utf16le($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>4500</td>
<td>sha1(sha1($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>4520</td>
<td>sha1($salt.sha1($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>4700</td>
<td>sha1(md5($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>4900</td>
<td>sha1($salt.$pass.$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>14400</td>
<td>sha1(CX)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>1410</td>
<td>sha256($pass.$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>1420</td>
<td>sha256($salt.$pass)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>1430</td>
<td>sha256(utf16le($pass).$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>1440</td>
<td>sha256($salt.utf16le($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>1710</td>
<td>sha512($pass.$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>1720</td>
<td>sha512($salt.$pass)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>1730</td>
<td>sha512(utf16le($pass).$salt)</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>1740</td>
<td>sha512($salt.utf16le($pass))</td>
<td>RawHash,Saltedand/orIterated</td>
</tr>
<tr>
<td>14000</td>
<td>DES(PT=$salt,key=$pass)</td>
<td>RawCipher,Known-Plaintextattack</td>
</tr>
<tr>
<td>14100</td>
<td>3DES(PT=$salt,key=$pass)</td>
<td>RawCipher,Known-Plaintextattack</td>
</tr>
<tr>
<td>14900</td>
<td>Skip32(PT=$salt,key=$pass)</td>
<td>RawCipher,Known-Plaintextattack</td>
</tr>
<tr>
<td>15400</td>
<td>ChaCha20</td>
<td>RawCipher,Known-Plaintextattack</td>
</tr>
<tr>
<td>2500</td>
<td>WPA-EAPOL-PBKDF2</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>2501</td>
<td>WPA-EAPOL-PMK</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>16800</td>
<td>WPA-PMKID-PBKDF2</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>16801</td>
<td>WPA-PMKID-PMK</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>7300</td>
<td>IPMI2RAKPHMAC-SHA1</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>7500</td>
<td>Kerberos5AS-REQPre-Authetype23</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>8300</td>
<td>DNSSEC(NSEC3)</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>10200</td>
<td>CRAM-MD5</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>11100</td>
<td>PostgreSQLCRAM(MD5)</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>11200</td>
<td>MySQLCRAM(SHA1)</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>16100</td>
<td>TACACS+</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>16500</td>
<td>JWT(JSONWebToken)</td>
<td>NetworkProtocols</td>
</tr>
<tr>
<td>121</td>
<td>SMF(SimpleMachinesForum)&gt;v1.1</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>400</td>
<td>phpBB3(MD5)</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>2811</td>
<td>MyBB1.2+</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>2811</td>
<td>IPB2+(InvisionPowerBoard)</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>8400</td>
<td>WBB3(WoltlabBurningBoard)</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>11</td>
<td>Joomla&lt;2.5.18</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>400</td>
<td>Joomla&gt;=2.5.18(MD5)</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>400</td>
<td>WordPress(MD5)</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>2612</td>
<td>PHPS</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>7900</td>
<td>Drupal7</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>21</td>
<td>osCommerce</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>21</td>
<td>xt:Commerce</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>11000</td>
<td>PrestaShop</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>124</td>
<td>Django(SHA-1)</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>10000</td>
<td>Django(PBKDF2-SHA256)</td>
<td>Forums,CMS,E-Commerce,Frameworks</td>
</tr>
<tr>
<td>12</td>
<td>PostgreSQL</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>131</td>
<td>MSSQL(2000)</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>132</td>
<td>MSSQL(2005)</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>1731</td>
<td>MSSQL(2012,2014)</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>200</td>
<td>MySQL323</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>300</td>
<td>MySQL4.1/MySQL5</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>3100</td>
<td>OracleH:Type(Oracle7+)</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>112</td>
<td>OracleS:Type(Oracle11+)</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>12300</td>
<td>OracleT:Type(Oracle12+)</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>8000</td>
<td>SybaseASE</td>
<td>DatabaseServer</td>
</tr>
<tr>
<td>15000</td>
<td>FileZillaServer&gt;=0.9.55</td>
<td>FTPServer</td>
</tr>
<tr>
<td>11500</td>
<td>CRC32</td>
<td>Checksums</td>
</tr>
<tr>
<td>3000</td>
<td>LM</td>
<td>OperatingSystems</td>
</tr>
<tr>
<td>1000</td>
<td>NTLM</td>
<td>OperatingSystems</td>
</tr>
<tr>
<td>500</td>
<td>md5crypt,MD5(Unix),Cisco-IOS$1$(MD5)</td>
<td>OperatingSystems</td>
</tr>
<tr>
<td>3200</td>
<td>bcrypt$2*$,Blowfish(Unix)</td>
<td>OperatingSystems</td>
</tr>
<tr>
<td>7400</td>
<td>sha256crypt$5$,SHA256(Unix)</td>
<td>OperatingSystems</td>
</tr>
<tr>
<td>1800</td>
<td>sha512crypt$6$,SHA512(Unix)</td>
<td>OperatingSystems</td>
</tr>
<tr>
<td>122</td>
<td>macOSv10.4,MacOSv10.5,MacOSv10.6</td>
<td>OperatingSystems</td>
</tr>
<tr>
<td>1722</td>
<td>macOSv10.7</td>
<td>OperatingSystems</td>
</tr>
<tr>
<td>7100</td>
<td>macOSv10.8+(PBKDF2-SHA512)</td>
<td>OperatingSystems</td>
</tr>
<tr>
<td>11600</td>
<td>7-Zip</td>
<td>Archives</td>
</tr>
<tr>
<td>12500</td>
<td>RAR3-hp</td>
<td>Archives</td>
</tr>
<tr>
<td>13000</td>
<td>RAR5</td>
<td>Archives</td>
</tr>
<tr>
<td>13600</td>
<td>WinZip</td>
<td>Archives</td>
</tr>
<tr>
<td>9700</td>
<td>MSOffice&lt;=2003$0/$1,MD5+RC4</td>
<td>Documents</td>
</tr>
<tr>
<td>9710</td>
<td>MSOffice&lt;=2003$0/$1,MD5+RC4,collider#1</td>
<td>Documents</td>
</tr>
<tr>
<td>9720</td>
<td>MSOffice&lt;=2003$0/$1,MD5+RC4,collider#2</td>
<td>Documents</td>
</tr>
<tr>
<td>9800</td>
<td>MSOffice&lt;=2003$3/$4,SHA1+RC4</td>
<td>Documents</td>
</tr>
<tr>
<td>9810</td>
<td>MSOffice&lt;=2003$3,SHA1+RC4,collider#1</td>
<td>Documents</td>
</tr>
<tr>
<td>9820</td>
<td>MSOffice&lt;=2003$3,SHA1+RC4,collider#2</td>
<td>Documents</td>
</tr>
<tr>
<td>9400</td>
<td>MSOffice2007</td>
<td>Documents</td>
</tr>
<tr>
<td>9500</td>
<td>MSOffice2010</td>
<td>Documents</td>
</tr>
<tr>
<td>9600</td>
<td>MSOffice2013</td>
<td>Documents</td>
</tr>
<tr>
<td>10400</td>
<td>PDF1.1-1.3(Acrobat2-4)</td>
<td>Documents</td>
</tr>
<tr>
<td>10410</td>
<td>PDF1.1-1.3(Acrobat2-4),collider#1</td>
<td>Documents</td>
</tr>
<tr>
<td>10420</td>
<td>PDF1.1-1.3(Acrobat2-4),collider#2</td>
<td>Documents</td>
</tr>
<tr>
<td>10500</td>
<td>PDF1.4-1.6(Acrobat5-8)</td>
<td>Documents</td>
</tr>
<tr>
<td>10600</td>
<td>PDF1.7Level3(Acrobat9)</td>
<td>Documents</td>
</tr>
<tr>
<td>10700</td>
<td>PDF1.7Level8(Acrobat10-11)</td>
<td>Documents</td>
</tr>
<tr>
<td>99999</td>
<td>Plaintext</td>
<td>Plaintext</td>
</tr>
</tbody></table>
<p><strong>掩码设置</strong><br>常见的掩码字符集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">l | abcdefghijklmnopqrstuvwxyz          纯小写字母</span><br><span class="line">u | ABCDEFGHIJKLMNOPQRSTUVWXYZ          纯大写字母</span><br><span class="line">d | 0123456789                  纯数字</span><br><span class="line">h | 0123456789abcdef                常见小写子目录和数字</span><br><span class="line">H | 0123456789ABCDEF                常见大写字母和数字</span><br><span class="line">s |  !<span class="string">&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~       特殊字符</span></span><br><span class="line"><span class="string">a | ?l?u?d?s                    键盘上所有可见的字符</span></span><br><span class="line"><span class="string">b | 0x00 - 0xff                 可能是用来匹配像空格这种密码的</span></span><br></pre></td></tr></table></figure>
<p>掩码使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">八位数字密码：?d?d?d?d?d?d?d?d</span><br><span class="line">八位未知密码：?a?a?a?a?a?a?a?a</span><br><span class="line">前四位为大写字母，后面四位为数字：?u?u?u?u?d?d?d?d</span><br><span class="line">前四位为数字或者是小写字母，后四位为大写字母或者数字：?h?h?h?h?H?H?H?H</span><br><span class="line">前三个字符未知，中间为admin，后三位未知：?a?a?aadmin?a?a?a</span><br><span class="line">6-8位数字密码：--increment --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l</span><br><span class="line">6-8位数字+小写字母密码：--increment --increment-min 6 --increment-max 8 ?h?h?h?h?h?h?h?h</span><br></pre></td></tr></table></figure>
<p>也可以自定义字符串，hashcat支持用户最多定义4组字符集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--custom-charset1 [chars]等价于 -1</span><br><span class="line">--custom-charset2 [chars]等价于 -2</span><br><span class="line">--custom-charset3 [chars]等价于 -3</span><br><span class="line">--custom-charset4 [chars]等价于 -4</span><br><span class="line">在掩码中用?1、?2、?3、?4来表示。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>信安之路学习</category>
      </categories>
      <tags>
        <tag>SQL学习</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
</search>
